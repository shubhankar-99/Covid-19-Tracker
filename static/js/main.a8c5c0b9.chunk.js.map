{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifidData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8c5c0b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n\n    if (!confirmed) {\n        return 'Loading....';\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={1.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovred</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={1.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={1.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of Deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\nexport default Cards","import axios from 'axios'\n\n\nconst url = 'https://covid19.mathdro.id/api';\n\n\nexport const fetchData = async (country) =>{\n\n    let changeableUrl = url;\n\n    if(country){\n        changeableUrl= `${url}/countries/${country}`\n    }\n\n    try{\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\n        \n        \n        return {confirmed, recovered, deaths,lastUpdate,};\n        \n    }\n    catch(error){\n        console.log(error)\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try{\n        const {data} = await axios.get(`${url}/daily`);\n        const modifidData= data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n\n        return(modifidData);\n    }\n    catch (error)\n    {\n        \n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async () =>{\n    \n    {\n    try{\n        const {data: {countries}} = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n    }\n    catch(error)\n    {\n        console.log(error);\n    }\n}\n}","import React,{useState,useEffect} from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\nimport { blue } from '@material-ui/core/colors';\n\n\n\nconst Chart = ({data : {confirmed,recovered,deaths}, country}) => {\n\n    const [dailyData, setDailyData] = useState([]);\n    \n\n    useEffect(() => {\n        const fetchAPI = async () =>{\n            setDailyData(await fetchDailyData());\n\n        }\n\n        console.log(dailyData);\n\n        fetchAPI();\n    },[]);\n\n    const lineChart = (\n        dailyData\n        ? <Line\n            data={{\n                labels: dailyData.map(({date}) => date),\n                datasets: [{\n                    data:dailyData.map(({confirmed}) => confirmed),\n                    label: 'Infected',\n                    backgroundColor: 'rgba(0,0,255,0.5)',\n                    borderColor:'blue',\n                    fill: true,\n                }, {\n                    data:dailyData.map(({deaths}) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255,0,0,0.5)',\n                    fill: true,\n                }],\n            }\n\n            }\n        />\n        : null\n    );\n\n    const barChart =(\n        confirmed\n        ? (\n        <Bar\n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{\n                    label: 'People',\n                    backgroundColor: ['rgba(0,0,255,0.5)',\n                        'rgba(0,255,0,0.5)',\n                        'rgba(255,0,0,0.5)',\n                    ],\n                    data:[confirmed.value, recovered.value, deaths.value]\n                }]\n            }}\n            options={{\n                legend: {display:false},\n                title: {display:true, text: `Current state in ${country}`}\n            }}\n        />\n        ): null\n    )\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart : barChart}\n        </div>\n    )\n}\nexport default Chart","import React , {useState,useEffect} from 'react'\nimport {NativeSelect, FormControl} from '@material-ui/core'\n\nimport styles from './CountryPicker.module.css'\nimport {fetchCountries} from '../../api'\n\nconst CountryPicker = ({handleCountryChange}) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect( () => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries())\n        }\n        fetchAPI();\n    },[setFetchedCountries])\n    return (\n        <FormControl className={styles.FormControl}>\n            <NativeSelect defaultValue=\"\" onChange={ (e) => handleCountryChange(e.target.value)}>\n                <option value=\"global\">Global</option>\n                {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)} \n            </NativeSelect>\n        </FormControl>\n    )\n}\nexport default CountryPicker","import React from 'react';\n\nimport {Cards, Chart, CountryPicker} from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\n\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component{\n\n    state= {\n        data: {},\n        country: '',\n\n    }\n\n    async componentDidMount() {\n        const fetchedData= await fetchData();\n        this.setState({ data: fetchedData})\n    }\n\n    handleCountryChange = async(country) => {\n        const fetchedData= await fetchData(country);\n        \n        this.setState({ data: fetchedData, country: country})\n        \n    }\n\n    render() {\n        const {data,country} = this.state;\n        return(\n            <div className={styles.container}>\n            <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\n            <Cards data={data}/>\n           \n            <CountryPicker handleCountryChange={this.handleCountryChange}/>\n            <Chart data={data} country={country}/>\n            \n            </div>\n        )\n    }\n\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App/> , document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormControl\":\"CountryPicker_FormControl__1RAyw\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}